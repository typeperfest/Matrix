#include <gtest/gtest.h>
#include "../src/IntMatrix.h"
#include <vector>

typedef std::vector<std::vector<int>> vvecint;
using namespace matrix;

TEST(TEST01, FormatCheck) {
    vvecint v1{{1, 2, 3}, {1, 2}, {1, 2, 3}};
    vvecint v2{{1}, {1, 2}};
    vvecint v3{{}, {1}, {}};
    vvecint v4{{1, 2, 3, 4}, {1, 2, 3, 4}, {1}};
    EXPECT_THROW(IntMatrix mv1(v1), std::runtime_error);
    EXPECT_THROW(IntMatrix mv2(v2), std::runtime_error);
    EXPECT_THROW(IntMatrix mv3(v3), std::runtime_error);
    EXPECT_THROW(IntMatrix mv4(v4), std::runtime_error);

    EXPECT_THROW(IntMatrix m1({{1, 2, 3}, {1, 2}, {1, 2, 3}}), std::runtime_error);
    EXPECT_THROW(IntMatrix m2({{1}, {1, 2}}), std::runtime_error);
    EXPECT_THROW(IntMatrix m3({{}, {1}, {}}), std::runtime_error);
    EXPECT_THROW(IntMatrix m4({{1, 2, 3, 4}, {1, 2, 3, 4}, {1}}), std::runtime_error);
}

TEST(TEST02, BasicConstruction) {
    vvecint v1{{1, 2, 3}, {1, 2, 3}, {1, 2, 3}};
    vvecint v2{{1}, {1}, {1}, {1}, {1}};
    vvecint v3{{1, 2, 3, 4, 5, 6, 7}};
    EXPECT_NO_THROW(IntMatrix m1(v1));
    EXPECT_NO_THROW(IntMatrix m2(v2));
    EXPECT_NO_THROW(IntMatrix m3(v3));

    EXPECT_NO_THROW(IntMatrix m4({{1, 2, 3}, {1, 2, 3}, {1, 2, 3}}));
    EXPECT_NO_THROW(IntMatrix m4({{1}, {1}, {1}, {1}, {1}}));
    EXPECT_NO_THROW(IntMatrix m4({{1, 2, 3, 4, 5, 6, 7}}));

    IntMatrix mat0;
    IntMatrix mat1(v1);
    IntMatrix mat2(mat1);
    IntMatrix mat3(std::move(mat2));
    vvecint v4{{}};
    IntMatrix mat4(v3);

    IntMatrix numbersConstructed1(7, 7);
    IntMatrix zeros1({{0, 0, 0, 0, 0, 0, 0},
                      {0, 0, 0, 0, 0, 0, 0},
                      {0, 0, 0, 0, 0, 0, 0},
                      {0, 0, 0, 0, 0, 0, 0},
                      {0, 0, 0, 0, 0, 0, 0},
                      {0, 0, 0, 0, 0, 0, 0},
                      {0, 0, 0, 0, 0, 0, 0}});
    EXPECT_EQ(numbersConstructed1, zeros1);
    IntMatrix numbersConstructed2(1, 1);
    IntMatrix zeros2({{0}});
    EXPECT_EQ(numbersConstructed2, zeros2);
    IntMatrix numbersConstructed3(2, 4);
    IntMatrix zeros3({{0, 0, 0, 0}, {0, 0, 0, 0}});
    EXPECT_EQ(numbersConstructed3, zeros3);
    IntMatrix numbersConstructed4(4, 2);
    IntMatrix zeros4({{0, 0}, {0, 0}, {0, 0}, {0, 0}});
    EXPECT_EQ(numbersConstructed4, zeros4);
}

TEST(TEST03, BasicAssignation) {
    vvecint v1{{1, 2, 3}, {1, 2, 3}, {1, 2, 3}};
    IntMatrix m1(v1);
    IntMatrix m2;
    m2 = m1;
    EXPECT_EQ(m1, m2);
    IntMatrix v2{{1, 2, 3}, {1, 2, 3}};
    IntMatrix m3(v2);
    m3 = m2;
    EXPECT_EQ(m2, m3);
    IntMatrix m4;
    m4 = std::move(m3);
    EXPECT_EQ(m4, m2);
}

TEST(TEST04, CompatibilityChecking) {
    IntMatrix mat1({{1, 2, 3, 4, 5}});
    IntMatrix mat2({{1}, {2}, {3}, {4}, {5}});
    IntMatrix mat3({{1}});
    IntMatrix squaredMat1({{1, 2, 3}, {1, 2, 3}, {1, 2, 3}});
    IntMatrix squaredMat2({{1, 2, 3}, {1, 2, 3}, {1, 2, 3}});
    IntMatrix mat6({{1, 2, 3, 4, 5}});
    IntMatrix empMat({{}});

    EXPECT_TRUE(squaredMat1.isCompatible(squaredMat2, Operation::ADDITION));
    EXPECT_TRUE(squaredMat1.isCompatible(squaredMat2, Operation::SUBSTRACTION));
    EXPECT_TRUE(squaredMat1.isCompatible(squaredMat2, Operation::MULTIPLICATION));
    EXPECT_TRUE(squaredMat1.isCompatible(squaredMat2, Operation::COMPARISON));

    EXPECT_TRUE(mat1.isCompatible(mat2, Operation::MULTIPLICATION));
    EXPECT_TRUE(mat2.isCompatible(mat1, Operation::MULTIPLICATION));
    EXPECT_FALSE(mat1.isCompatible(mat2, Operation::ADDITION));
    EXPECT_FALSE(mat1.isCompatible(mat2, Operation::SUBSTRACTION));
    EXPECT_FALSE(mat1.isCompatible(mat2, Operation::COMPARISON));

    EXPECT_TRUE(mat1.isCompatible(mat6, Operation::ADDITION));
    EXPECT_TRUE(mat1.isCompatible(mat6, Operation::SUBSTRACTION));
    EXPECT_TRUE(mat1.isCompatible(mat6, Operation::COMPARISON));
    EXPECT_FALSE(mat1.isCompatible(mat6, Operation::MULTIPLICATION));

    EXPECT_FALSE(empMat.isCompatible(mat1, Operation::ADDITION));
    EXPECT_FALSE(empMat.isCompatible(mat1, Operation::MULTIPLICATION));
    EXPECT_FALSE(empMat.isCompatible(mat1, Operation::SUBSTRACTION));
    EXPECT_FALSE(empMat.isCompatible(mat1, Operation::COMPARISON));
}

TEST(TEST05, ArithmeticOperations) {
    vvecint v1{{1, 2, 3}, {1, 2, 3}, {1, 2, 3}};
    vvecint v2{{3, 2, 1}, {3, 2, 1}, {3, 2, 1}};
    vvecint vr{{4, 4, 4}, {4, 4, 4}, {4, 4, 4}};
    IntMatrix mat1(v1);
    IntMatrix mat2(v2);
    IntMatrix matr(vr);
    EXPECT_EQ(mat1 + mat2, matr);
    IntMatrix rectMat1({{1, 2, 3, 4}, {1, 2, 3, 4}, {1, 2, 3, 4}});
    IntMatrix rectMat2({{1, 2, 3, 4}, {2, 2, 3, 4}, {1, 2, 3, 4}});
    IntMatrix rectMat3({{2, 4, 6, 8}, {3, 4, 6, 8}, {2, 4, 6, 8}});
    EXPECT_EQ(rectMat1 + rectMat2, rectMat3);
    IntMatrix rowMat1({{7, 7, 7}});
    IntMatrix rowMat2({{3, 3, 3}});
    IntMatrix rowMat3({{4, 4, 4}});
    IntMatrix debugMatrix(rowMat1 - rowMat2);
    IntMatrix rowMat5 = rowMat1 - rowMat2; 
    EXPECT_EQ(rowMat5, rowMat3);
    IntMatrix rowMat4({{5, 5, 5}});
    IntMatrix colMat1({{4}, {4}, {4}});
    IntMatrix singleMat1({{60}});
    IntMatrix colMat2({{20, 20, 20}, {20, 20, 20}, {20, 20, 20}});
    IntMatrix mat4_4_1{{2, 5, 4, 1}, {1, 1, 3, -2}, {4, -5, 1, 4}, {5, 1, 5, 4}};
    IntMatrix mat4_4_2{{1, 2, 3, 1}, {4, -2, 3, -1}, {1, -3, 2, 4}, {1, 1, 1, 1}};
    IntMatrix mat4_4_r{{27, -17, 30, 14}, {6, -11, 10, 10}, {-11, 19, 3, 17}, {18, -3, 32, 28}};
    IntMatrix debugResult(mat4_4_1 * mat4_4_2);
    EXPECT_EQ(debugResult, mat4_4_r);
    EXPECT_EQ(rowMat4 * colMat1, singleMat1);
    EXPECT_EQ(colMat1 * rowMat4, colMat2);
}

TEST(TEST06, AdditionBoundariesCheck) {
    // Generated test 1
    IntMatrix firstOp1{{-7, -116, -241, 110}, {248, 104, 195, 158}, {242, -77, -177, 12}, {-160, -53, -67, 168}};
    IntMatrix secondOp1{{-2, -68, 44, -15}, {215, 213, -228, 62}, {45, 174, -95, -229}, {171, 245, -131, 227}};
    IntMatrix result1{{-9, -184, -197, 95}, {463, 317, -33, 220}, {287, 97, -272, -217}, {11, 192, -198, 395}};
    EXPECT_EQ(firstOp1 + secondOp1, result1);
    // Generated test 2
    IntMatrix firstOp2{{-146, 63, 68, 188}, {-146, -130, -25, 247}, {219, -68, 221, -233}, {205, -235, -245, -166}};
    IntMatrix secondOp2{{-49, 180, 10, 168}, {47, -65, 20, -32}, {-118, -93, -154, -82}, {204, -238, 175, -133}};
    IntMatrix result2{{-195, 243, 78, 356}, {-99, -195, -5, 215}, {101, -161, 67, -315}, {409, -473, -70, -299}};
    EXPECT_EQ(firstOp2 + secondOp2, result2);
    // Generation done by ./generateTestcases.py
    // Generated test 1
    IntMatrix firstOp3{{68, -229, -169, -218, -235}, {95, 251, -53, 110, 29}, {240, -187, -51, 74, -239}, {-182, -1, -20, 34, 243}, {209, -237, 216, 9, -33}};
    IntMatrix secondOp3{{196, -16, 80, -8, -182}, {126, -61, 193, 148, -101}, {-107, -78, 132, 175, 139}, {232, 47, 101, 219, -224}, {-90, -73, -203, -226, 95}};
    IntMatrix result3{{264, -245, -89, -226, -417}, {221, 190, 140, 258, -72}, {133, -265, 81, 249, -100}, {50, 46, 81, 253, 19}, {119, -310, 13, -217, 62}};
    EXPECT_EQ(firstOp3 + secondOp3, result3);
    // Generated test 2
    IntMatrix firstOp4{{-51, 34, -102, 236, -101}, {246, -7, 22, -23, -95}, {-242, -251, 66, -112, -11}, {130, 30, 225, 78, -15}, {-115, 171, 89, 182, 132}};
    IntMatrix secondOp4{{-42, 67, 254, 16, -211}, {222, 66, -34, 229, -178}, {-126, -120, 8, 181, 114}, {-70, 125, 56, 223, 237}, {92, 86, -73, 49, 116}};
    IntMatrix result4{{-93, 101, 152, 252, -312}, {468, 59, -12, 206, -273}, {-368, -371, 74, 69, 103}, {60, 155, 281, 301, 222}, {-23, 257, 16, 231, 248}};
    EXPECT_EQ(firstOp4 + secondOp4, result4);
    // Generation done by ./generateTestcases.py
    // Generated test 1
    IntMatrix firstOp5{{175, -247, -128, -240, 140, 113}, {219, -64, -235, -247, -109, 74}, {-100, 100, -172, 203, -107, -21}, {-69, -219, -8, -82, 243, -28}, {-6, 252, 26, 227, 140, 252}, {212, -181, 185, 200, -170, -152}};
    IntMatrix secondOp5{{-173, -158, -21, -207, 97, 79}, {-106, -242, -162, 10, 32, 155}, {-176, 212, -86, -142, 61, 113}, {-194, 15, 20, -95, 158, -194}, {-225, 146, 245, -9, 155, 57}, {-239, -161, -230, -1, -43, -188}};
    IntMatrix result5{{2, -405, -149, -447, 237, 192}, {113, -306, -397, -237, -77, 229}, {-276, 312, -258, 61, -46, 92}, {-263, -204, 12, -177, 401, -222}, {-231, 398, 271, 218, 295, 309}, {-27, -342, -45, 199, -213, -340}};
    EXPECT_EQ(firstOp5 + secondOp5, result5);
    // Generated test 2
    IntMatrix firstOp6{{245, 31, 121, -185, 150, -219}, {-118, 233, 114, 164, 129, 149}, {211, 148, 234, 74, 237, -221}, {-251, 129, -146, -216, 126, -128}, {-212, 141, 78, -23, -143, 158}, {-80, 109, -170, -27, 141, -65}};
    IntMatrix secondOp6{{60, 132, -86, 59, 89, -27}, {204, 213, 103, -21, 140, 211}, {26, -231, 249, 94, 150, 202}, {-215, 236, 74, 140, -45, 183}, {-57, 217, -98, -26, -180, -231}, {-251, 185, -204, -242, 187, -232}};
    IntMatrix result6{{305, 163, 35, -126, 239, -246}, {86, 446, 217, 143, 269, 360}, {237, -83, 483, 168, 387, -19}, {-466, 365, -72, -76, 81, 55}, {-269, 358, -20, -49, -323, -73}, {-331, 294, -374, -269, 328, -297}};
    EXPECT_EQ(firstOp6 + secondOp6, result6);
    // Generation done by ./generateTestcases.py
    // Generated test 1
    IntMatrix firstOp7{{4, 219, 182, -227, 144, -32, 193}, {-111, -115, 62, -50, 217, -180, -68}, {-64, 221, 168, 230, 10, 100, 216}, {162, 157, -93, -41, 193, -125, 205}, {-12, -240, 143, 213, 92, 68, 22}, {233, 89, -214, -39, 177, -182, 234}, {152, -54, 213, -56, 246, -175, -135}};
    IntMatrix secondOp7{{-99, -83, -127, 53, 87, -227, -98}, {-202, 200, -201, 155, 132, -74, -157}, {-114, 99, 184, -30, 237, -83, -188}, {154, -217, -152, -247, 49, 14, 221}, {161, 139, -60, 133, 159, -185, -191}, {-222, 247, -154, 237, 58, -24, -117}, {-55, -89, 57, -88, -132, 209, 181}};
    IntMatrix result7{{-95, 136, 55, -174, 231, -259, 95}, {-313, 85, -139, 105, 349, -254, -225}, {-178, 320, 352, 200, 247, 17, 28}, {316, -60, -245, -288, 242, -111, 426}, {149, -101, 83, 346, 251, -117, -169}, {11, 336, -368, 198, 235, -206, 117}, {97, -143, 270, -144, 114, 34, 46}};
    EXPECT_EQ(firstOp7 + secondOp7, result7);
    // Generated test 2
    IntMatrix firstOp8{{-200, 219, 5, -110, 160, -74, -54}, {38, 34, -144, 194, 222, -182, -172}, {106, -80, -40, 129, 144, -243, -117}, {-162, -78, 204, 252, 145, 189, -167}, {152, 25, 123, 204, 235, 208, -177}, {-186, 216, 220, 131, -128, -147, -19}, {-169, -100, -248, -129, -123, 146, -105}};
    IntMatrix secondOp8{{-158, 210, 179, -204, 200, -50, 227}, {-126, 65, 172, -41, -170, 94, -190}, {228, 30, -246, -253, -194, -37, -252}, {-161, 215, -7, 133, -148, 202, -75}, {36, -76, 99, -45, 186, 75, 216}, {26, -5, -78, -80, -39, -94, -111}, {-206, 205, 31, -171, -159, -41, -6}};
    IntMatrix result8{{-358, 429, 184, -314, 360, -124, 173}, {-88, 99, 28, 153, 52, -88, -362}, {334, -50, -286, -124, -50, -280, -369}, {-323, 137, 197, 385, -3, 391, -242}, {188, -51, 222, 159, 421, 283, 39}, {-160, 211, 142, 51, -167, -241, -130}, {-375, 105, -217, -300, -282, 105, -111}};
    EXPECT_EQ(firstOp8 + secondOp8, result8);
    // Generation done by ./generateTestcases.py
}

TEST(TEST07, StressAddition16_16) {
    // Generated test 1
    IntMatrix firstOp1{{83, 172, -164, 239, -49, 243, 85, 69, -115, 67, -198, -222, -93, 239, 156, -132}, {-240, -120, 25, 153, -168, -127, -169, 216, 17, -84, -100, -249, 39, 205, -88, -209}, {-54, 12, 4, 35, 117, 137, -47, -224, 37, -233, 43, 172, -187, -52, -244, 148}, {-207, 199, -15, 158, 228, 147, -224, -69, -18, -93, -114, 145, -13, 64, 101, -211}, {-43, 27, -205, 119, -148, -117, 12, -224, 77, 56, 124, 75, -245, -217, -56, -157}, {196, -55, 30, 157, -150, -218, -171, 3, 171, 85, 236, -25, 166, 253, 227, 69}, {207, 226, 33, -170, 92, 72, -178, -143, 63, -230, 110, -50, 94, -256, 37, 86}, {28, -12, 161, 233, -154, -227, 80, 188, -116, -89, -251, 78, -135, 245, -246, 5}, {-256, -168, -154, 52, -147, -34, 207, 147, -114, 191, 171, 122, -139, 165, -240, 32}, {-230, -40, 229, -109, -54, 220, 160, 100, -24, 153, 203, 140, 57, 210, -250, -74}, {-6, -163, 144, 140, -1, -116, 86, 250, 17, -204, -201, 246, -107, 160, -50, 199}, {87, 122, -102, -36, -167, -174, 242, -39, -15, -177, 23, 197, 106, -249, 129, -115}, {149, 202, 2, -47, -58, 109, -33, 157, -229, -165, 154, -6, 51, -88, 49, -13}, {-140, -216, 46, 227, 82, 34, -78, -158, -60, -18, -94, -191, -74, -54, 176, -36}, {-230, -200, -133, -252, -188, 243, 70, -238, -189, -42, 0, 180, -246, -213, 200, 241}, {220, -153, -101, -146, 125, -138, -22, 211, -231, -229, -17, 11, -193, 89, -11, -41}};
    IntMatrix secondOp1{{172, -10, -84, -140, 167, -147, -113, 151, -48, -209, -253, 56, -28, 26, -125, 109}, {-49, -30, -107, -237, 29, -48, 101, -33, -43, -233, -232, -155, -192, 32, 147, -75}, {-29, 23, 227, 23, 150, 12, -86, 97, -149, -212, 29, -210, -94, 108, 176, 139}, {-227, -3, -52, 120, 231, -208, 194, 118, 8, 190, 129, 208, 213, -118, 105, 178}, {-146, -182, -41, -104, 0, -17, -23, -249, -58, 226, 100, -60, 41, -148, 179, 157}, {-192, -211, 104, 78, -70, 176, 250, 117, -20, -121, -99, -70, -86, 243, 207, 148}, {-22, 228, -96, 228, -28, 49, 175, -194, -256, -48, -119, 90, 118, 183, -48, -27}, {20, -171, -171, -238, 72, 202, -217, 53, 64, 56, -138, 169, 186, -224, 128, 108}, {61, -67, 244, -43, 140, 228, 7, 39, 156, -32, -11, 160, -238, -39, 200, 114}, {-245, -144, 31, -143, -150, -234, -211, 238, -198, 169, -224, -217, 207, 186, -249, 82}, {-36, -31, -191, 92, -125, 48, 163, 93, -187, -190, 192, -157, -26, -76, 142, -177}, {184, -247, -61, 125, 139, -77, -214, -158, -246, -87, -102, -127, -169, 103, 56, 243}, {174, 131, 37, -75, -106, -181, 65, 188, 136, 203, 3, -3, 115, 7, -235, -254}, {97, -100, -74, 173, -189, -43, -212, 167, -102, 178, -205, -25, 93, -90, 114, -198}, {-13, -105, -192, -189, -4, 104, -215, -102, -7, -239, 77, 86, -21, -247, 178, 143}, {-31, -117, 243, -249, -114, -1, 118, -110, -251, 59, 77, -200, 57, -114, 159, -230}};
    IntMatrix result1{{255, 162, -248, 99, 118, 96, -28, 220, -163, -142, -451, -166, -121, 265, 31, -23}, {-289, -150, -82, -84, -139, -175, -68, 183, -26, -317, -332, -404, -153, 237, 59, -284}, {-83, 35, 231, 58, 267, 149, -133, -127, -112, -445, 72, -38, -281, 56, -68, 287}, {-434, 196, -67, 278, 459, -61, -30, 49, -10, 97, 15, 353, 200, -54, 206, -33}, {-189, -155, -246, 15, -148, -134, -11, -473, 19, 282, 224, 15, -204, -365, 123, 0}, {4, -266, 134, 235, -220, -42, 79, 120, 151, -36, 137, -95, 80, 496, 434, 217}, {185, 454, -63, 58, 64, 121, -3, -337, -193, -278, -9, 40, 212, -73, -11, 59}, {48, -183, -10, -5, -82, -25, -137, 241, -52, -33, -389, 247, 51, 21, -118, 113}, {-195, -235, 90, 9, -7, 194, 214, 186, 42, 159, 160, 282, -377, 126, -40, 146}, {-475, -184, 260, -252, -204, -14, -51, 338, -222, 322, -21, -77, 264, 396, -499, 8}, {-42, -194, -47, 232, -126, -68, 249, 343, -170, -394, -9, 89, -133, 84, 92, 22}, {271, -125, -163, 89, -28, -251, 28, -197, -261, -264, -79, 70, -63, -146, 185, 128}, {323, 333, 39, -122, -164, -72, 32, 345, -93, 38, 157, -9, 166, -81, -186, -267}, {-43, -316, -28, 400, -107, -9, -290, 9, -162, 160, -299, -216, 19, -144, 290, -234}, {-243, -305, -325, -441, -192, 347, -145, -340, -196, -281, 77, 266, -267, -460, 378, 384}, {189, -270, 142, -395, 11, -139, 96, 101, -482, -170, 60, -189, -136, -25, 148, -271}};
    EXPECT_EQ(firstOp1 + secondOp1, result1);
    // Generated test 2
    IntMatrix firstOp2{{223, -189, 12, -237, 210, -236, 190, 248, 145, -9, 61, 124, 113, -115, -146, 27}, {70, 82, -25, -231, 95, -158, 42, 53, 147, 156, -179, 190, 99, -232, 148, 18}, {93, 27, 209, 52, -44, -125, -51, 97, -113, -128, -53, -104, 27, -118, 86, 92}, {184, -208, 129, -64, -95, -241, 6, -37, -114, -198, -180, -5, 28, 111, -100, 182}, {-210, -148, 86, -243, -133, 1, -25, -181, -230, -100, 172, 181, -201, -74, 225, -69}, {31, -24, 167, -31, 105, -59, 223, -84, -199, 106, -51, -36, -49, 179, -197, 68}, {-144, -128, -135, -58, -118, -78, -103, 53, 236, 243, -145, -252, -97, -229, 60, 75}, {175, -17, 227, 127, 194, 71, 82, -166, 205, 154, 44, 214, 74, -89, 143, 253}, {115, -52, -246, -1, 87, -190, -31, 197, -31, 222, 178, 65, -76, 16, 187, 18}, {-130, -38, -205, 22, -115, -182, 68, -66, -200, -164, 71, 196, 214, 31, 153, 176}, {-43, 110, -45, 97, -14, -74, 227, 144, -132, -242, 167, -102, 182, 157, -120, 41}, {-14, 55, -117, -119, 8, -223, 6, -164, -220, 110, 9, -158, -223, -185, 219, -116}, {-99, -249, -48, 79, -138, -142, -154, -176, -173, -125, 48, 98, 41, -94, -67, -185}, {-25, -90, -165, -244, -120, 72, -55, 24, -97, -251, 53, -33, 12, -190, 184, 49}, {188, -148, -111, 205, -167, 108, 193, 235, 227, 64, -44, 125, 37, -236, -172, 232}, {73, -206, -172, 243, 246, 61, -115, 82, 29, -243, 208, 15, -124, -117, 17, -82}};
    IntMatrix secondOp2{{212, 179, 215, -187, -52, -5, -232, 217, 178, -177, -73, -203, -96, -12, 90, 184}, {229, -244, 161, -55, -138, -73, -12, -185, 116, -156, 210, 192, 144, -111, -77, 10}, {-234, -209, 133, 222, -241, -145, 104, -100, -188, -108, 11, 200, 116, -21, -128, 129}, {-96, 170, 45, -32, -183, -132, -2, -111, 144, 120, -166, -111, -139, -17, 108, 119}, {130, 149, -232, 100, -241, -38, -38, -13, -6, 241, -70, -252, 101, -46, 113, -239}, {12, -145, 182, 116, 133, 104, -215, -228, -178, -139, -15, -222, 144, 233, 159, -54}, {26, 149, 42, -202, -38, -16, 189, -92, -239, -130, 80, 166, -17, 221, 160, -221}, {138, -74, -43, 79, -38, -109, 72, -125, -73, 112, -221, -73, 25, -124, 201, 53}, {-178, 153, 123, 253, 142, -184, -229, -76, -87, 12, -139, -114, 223, 224, -11, -237}, {-203, 180, 236, -241, -19, -151, 237, 88, 57, 221, -230, 100, 113, 96, 154, -198}, {-39, 138, 130, -243, 50, 162, -242, -238, -34, -49, -13, 5, -202, 245, 247, -143}, {250, -73, -68, -46, -230, 72, 17, 144, -233, 211, -174, -19, -136, 204, -141, 141}, {-45, 17, 93, 165, 140, -70, -244, -148, 76, 87, 31, 245, -11, -2, -26, -118}, {7, 180, 140, 59, -10, 67, -179, 2, -212, -255, -209, 212, 13, 205, -171, 10}, {93, -70, -126, 145, -217, -170, -253, -149, -68, -204, -67, 23, 104, 147, 89, -73}, {-237, 250, 17, 98, 187, 240, 203, 68, 0, 88, -3, 227, 109, -109, -25, -16}};
    IntMatrix result2{{435, -10, 227, -424, 158, -241, -42, 465, 323, -186, -12, -79, 17, -127, -56, 211}, {299, -162, 136, -286, -43, -231, 30, -132, 263, 0, 31, 382, 243, -343, 71, 28}, {-141, -182, 342, 274, -285, -270, 53, -3, -301, -236, -42, 96, 143, -139, -42, 221}, {88, -38, 174, -96, -278, -373, 4, -148, 30, -78, -346, -116, -111, 94, 8, 301}, {-80, 1, -146, -143, -374, -37, -63, -194, -236, 141, 102, -71, -100, -120, 338, -308}, {43, -169, 349, 85, 238, 45, 8, -312, -377, -33, -66, -258, 95, 412, -38, 14}, {-118, 21, -93, -260, -156, -94, 86, -39, -3, 113, -65, -86, -114, -8, 220, -146}, {313, -91, 184, 206, 156, -38, 154, -291, 132, 266, -177, 141, 99, -213, 344, 306}, {-63, 101, -123, 252, 229, -374, -260, 121, -118, 234, 39, -49, 147, 240, 176, -219}, {-333, 142, 31, -219, -134, -333, 305, 22, -143, 57, -159, 296, 327, 127, 307, -22}, {-82, 248, 85, -146, 36, 88, -15, -94, -166, -291, 154, -97, -20, 402, 127, -102}, {236, -18, -185, -165, -222, -151, 23, -20, -453, 321, -165, -177, -359, 19, 78, 25}, {-144, -232, 45, 244, 2, -212, -398, -324, -97, -38, 79, 343, 30, -96, -93, -303}, {-18, 90, -25, -185, -130, 139, -234, 26, -309, -506, -156, 179, 25, 15, 13, 59}, {281, -218, -237, 350, -384, -62, -60, 86, 159, -140, -111, 148, 141, -89, -83, 159}, {-164, 44, -155, 341, 433, 301, 88, 150, 29, -155, 205, 242, -15, -226, -8, -98}};
    EXPECT_EQ(firstOp2 + secondOp2, result2);
    // Generated test 3
    IntMatrix firstOp3{{198, 211, 71, -103, -25, -70, -85, -115, 39, 236, -30, -190, 250, 47, -96, 224}, {118, -48, 168, -127, 207, -17, 15, -9, 5, -145, 5, 0, -169, -114, 75, -100}, {-169, 58, -7, 57, 105, -6, -78, -89, 211, -225, 158, -101, 69, -235, -91, 227}, {-170, -32, -183, 107, -162, 62, -253, -138, -150, 192, 130, 145, -32, 248, 100, -63}, {82, 87, -255, -211, 130, -135, -115, 103, -15, 116, -74, -245, -80, 126, -213, -7}, {194, -137, 198, -64, 176, -239, -51, 236, -172, -106, 87, 199, 95, 26, 144, 86}, {-189, 98, 26, -252, -238, -203, 34, -31, 7, 178, -196, -163, -53, -74, -157, 138}, {88, -161, -198, -100, -153, 24, -147, -96, 28, -68, -222, 235, 43, -234, 127, 184}, {91, 114, -242, -138, 202, -105, 34, -227, -27, -33, -83, -1, -189, 119, -249, 38}, {50, 33, 141, 131, -89, -230, 168, -30, 49, -41, 171, 165, 193, 117, 228, -158}, {95, 52, -84, 108, 114, -111, -229, -198, 49, 181, 210, -208, 175, 211, 150, -7}, {-168, 156, 166, -232, -144, 24, -175, 193, 217, 108, -128, -170, 220, -244, -64, 28}, {95, -202, 11, 71, 92, 19, -185, 171, -21, -13, -32, -236, -205, -76, 55, 81}, {-65, 179, -99, 127, -13, -156, 105, -218, 1, -104, 58, -36, 54, 127, -208, 138}, {55, 158, -109, -46, 174, 37, 2, -198, 251, -92, 81, -85, -3, 187, 62, 92}, {-163, -112, 166, 250, -77, 36, -3, 11, -120, 18, -89, -203, -177, 172, 55, 148}};
    IntMatrix secondOp3{{173, -72, 213, 12, 195, 27, -215, -255, 10, 223, -96, -14, -67, -126, -26, 157}, {-94, -38, 84, 160, 73, 146, -185, 53, 153, 72, 199, -250, 147, -248, -199, -254}, {-82, -36, -198, 54, 44, -158, -34, -1, -219, -214, 231, -42, 46, -199, 91, 142}, {-247, 75, 146, 117, -214, 24, 140, 17, 130, 136, -11, -225, -43, 97, -44, 21}, {-47, 36, 206, 28, 70, -97, -87, -27, -7, -254, 121, 190, -6, -159, -115, 69}, {-242, -55, -172, 58, -211, 158, 213, -57, -175, 231, -172, 168, 110, -90, -104, 40}, {-227, -119, 244, 59, -144, 239, 102, -240, -74, -102, 244, 52, 49, -244, -88, -83}, {-61, 9, -184, -135, -19, 220, -229, 1, 94, -13, 126, -22, -85, 230, -24, -171}, {-188, 52, 107, -74, -90, 86, -225, -102, -243, -140, -80, -28, 214, 179, 205, -179}, {37, 135, -105, 49, -53, -201, -113, 153, -79, 204, 217, 189, -76, 128, 101, -222}, {114, -249, 129, -15, -234, -163, 243, -160, 92, -166, 245, 201, 155, -167, 52, 127}, {191, 12, 208, 210, -23, -83, -183, -243, 5, 114, -166, 35, 197, 116, -83, -112}, {-146, 75, -131, -30, -23, -210, -9, 27, -255, 22, -68, 112, -131, 31, -192, -167}, {62, -225, 77, -107, 167, 192, 67, -242, 120, 133, -243, 56, -141, 131, 46, -123}, {60, 230, -126, 53, -98, -235, 240, -156, 120, 181, -63, -112, 105, 193, 56, -4}, {-186, 191, 183, 137, -69, -185, -74, 251, 221, -122, -187, -177, 201, -153, -219, 123}};
    IntMatrix result3{{371, 139, 284, -91, 170, -43, -300, -370, 49, 459, -126, -204, 183, -79, -122, 381}, {24, -86, 252, 33, 280, 129, -170, 44, 158, -73, 204, -250, -22, -362, -124, -354}, {-251, 22, -205, 111, 149, -164, -112, -90, -8, -439, 389, -143, 115, -434, 0, 369}, {-417, 43, -37, 224, -376, 86, -113, -121, -20, 328, 119, -80, -75, 345, 56, -42}, {35, 123, -49, -183, 200, -232, -202, 76, -22, -138, 47, -55, -86, -33, -328, 62}, {-48, -192, 26, -6, -35, -81, 162, 179, -347, 125, -85, 367, 205, -64, 40, 126}, {-416, -21, 270, -193, -382, 36, 136, -271, -67, 76, 48, -111, -4, -318, -245, 55}, {27, -152, -382, -235, -172, 244, -376, -95, 122, -81, -96, 213, -42, -4, 103, 13}, {-97, 166, -135, -212, 112, -19, -191, -329, -270, -173, -163, -29, 25, 298, -44, -141}, {87, 168, 36, 180, -142, -431, 55, 123, -30, 163, 388, 354, 117, 245, 329, -380}, {209, -197, 45, 93, -120, -274, 14, -358, 141, 15, 455, -7, 330, 44, 202, 120}, {23, 168, 374, -22, -167, -59, -358, -50, 222, 222, -294, -135, 417, -128, -147, -84}, {-51, -127, -120, 41, 69, -191, -194, 198, -276, 9, -100, -124, -336, -45, -137, -86}, {-3, -46, -22, 20, 154, 36, 172, -460, 121, 29, -185, 20, -87, 258, -162, 15}, {115, 388, -235, 7, 76, -198, 242, -354, 371, 89, 18, -197, 102, 380, 118, 88}, {-349, 79, 349, 387, -146, -149, -77, 262, 101, -104, -276, -380, 24, 19, -164, 271}};
    EXPECT_EQ(firstOp3 + secondOp3, result3);
    // Generated test 4
    IntMatrix firstOp4{{-38, 150, -33, -241, 107, -224, 111, 60, -239, 169, 226, 157, 30, 108, -6, 145}, {-85, 167, 15, -45, 30, 233, 248, -215, -146, 126, -169, -172, -184, -243, 47, -173}, {46, -69, -202, -227, 141, 119, -54, -5, -37, -130, -163, 82, 176, 203, 9, 5}, {42, 227, -252, 71, -48, 174, -160, -169, 223, -134, -78, 138, -138, 156, 34, 86}, {5, 157, 126, 92, -224, 180, -128, -172, -23, -128, 54, -245, -191, -30, 95, 123}, {-183, -96, -23, -125, 57, 55, 180, 235, 44, -183, -210, -99, 243, 108, -65, 168}, {161, 252, 223, -166, -13, -109, 61, 58, 159, -196, 200, 0, 71, 221, 54, -205}, {-126, 164, 84, -206, -61, 49, -129, -247, -109, 237, -138, -81, -219, 232, -2, -125}, {113, -118, -33, 75, -172, 145, 9, 254, 62, 25, 117, 243, 114, 163, -176, 20}, {-9, -4, -226, -83, 19, -135, 252, 6, 53, 155, 144, 64, 36, -228, 114, 3}, {-242, -187, -171, 224, -51, 86, 204, -155, 168, -188, -210, -25, 123, 21, -131, 2}, {106, -83, -232, -110, 58, 32, -43, 119, -131, -46, -211, 51, 179, -51, -92, -219}, {-221, -194, 215, 44, -233, -253, 244, -179, 198, -254, 62, 131, -123, 30, -56, -94}, {87, -1, 8, -90, 125, -76, 151, 230, -37, -38, 52, -131, 118, 100, 66, 254}, {169, 218, 144, 92, 96, 236, -90, 193, 36, -133, 135, 96, -5, 179, -213, 2}, {121, -230, 214, -113, -192, 183, 135, 224, 92, 109, 209, -88, 81, -53, 176, -224}};
    IntMatrix secondOp4{{-222, -234, -134, 18, 210, 109, 236, -55, -145, 20, -144, 217, -50, -219, -23, 215}, {78, 123, 14, -155, 231, -187, -11, -15, -105, 215, 161, -66, 143, -144, 49, -162}, {-59, 178, -198, -138, -46, -130, -115, -43, 159, -22, 76, -66, 234, -2, -110, -143}, {211, 3, -139, -15, 49, -172, -26, -50, -195, -26, 177, 198, -131, 186, -44, -139}, {-222, -230, -155, -181, -91, 49, 87, 26, -7, -196, 206, -38, 126, 47, 133, -106}, {-209, 163, -216, -128, -228, -229, -177, -58, 251, 221, -114, -171, -134, -121, 22, -196}, {-216, 241, -113, 249, -85, -194, -137, -184, 161, -66, -17, -29, -142, -237, 41, 18}, {61, -17, 197, -232, -98, 136, -27, -43, 213, -175, 53, -61, 34, 8, -182, 200}, {159, -156, 178, -173, -11, -256, 140, -36, 21, -100, 107, 22, -29, -218, 88, -105}, {10, -3, 36, 137, 54, -192, 89, 200, -49, 67, -228, 71, -252, -160, -102, 130}, {-113, 245, 129, 67, -61, 39, -175, -243, 157, 220, -9, -21, -229, 172, 207, -239}, {7, -27, -37, -115, -240, -253, -130, 40, -204, -118, -111, -90, 61, -112, 193, -148}, {139, 31, 159, 63, 248, 253, 44, 78, -28, -144, 13, -81, 94, 24, -175, -111}, {31, -205, -88, 229, -148, -122, -77, 171, -97, 194, 28, -154, -83, 89, -185, 144}, {-97, 254, 157, -237, -5, -9, 55, -55, -171, 85, 124, -176, 114, 233, 198, -65}, {-241, 15, 212, -30, 128, 85, -231, -203, -139, 29, -87, -249, 132, 8, 63, -6}};
    IntMatrix result4{{-260, -84, -167, -223, 317, -115, 347, 5, -384, 189, 82, 374, -20, -111, -29, 360}, {-7, 290, 29, -200, 261, 46, 237, -230, -251, 341, -8, -238, -41, -387, 96, -335}, {-13, 109, -400, -365, 95, -11, -169, -48, 122, -152, -87, 16, 410, 201, -101, -138}, {253, 230, -391, 56, 1, 2, -186, -219, 28, -160, 99, 336, -269, 342, -10, -53}, {-217, -73, -29, -89, -315, 229, -41, -146, -30, -324, 260, -283, -65, 17, 228, 17}, {-392, 67, -239, -253, -171, -174, 3, 177, 295, 38, -324, -270, 109, -13, -43, -28}, {-55, 493, 110, 83, -98, -303, -76, -126, 320, -262, 183, -29, -71, -16, 95, -187}, {-65, 147, 281, -438, -159, 185, -156, -290, 104, 62, -85, -142, -185, 240, -184, 75}, {272, -274, 145, -98, -183, -111, 149, 218, 83, -75, 224, 265, 85, -55, -88, -85}, {1, -7, -190, 54, 73, -327, 341, 206, 4, 222, -84, 135, -216, -388, 12, 133}, {-355, 58, -42, 291, -112, 125, 29, -398, 325, 32, -219, -46, -106, 193, 76, -237}, {113, -110, -269, -225, -182, -221, -173, 159, -335, -164, -322, -39, 240, -163, 101, -367}, {-82, -163, 374, 107, 15, 0, 288, -101, 170, -398, 75, 50, -29, 54, -231, -205}, {118, -206, -80, 139, -23, -198, 74, 401, -134, 156, 80, -285, 35, 189, -119, 398}, {72, 472, 301, -145, 91, 227, -35, 138, -135, -48, 259, -80, 109, 412, -15, -63}, {-120, -215, 426, -143, -64, 268, -96, 21, -47, 138, 122, -337, 213, -45, 239, -230}};
    EXPECT_EQ(firstOp4 + secondOp4, result4);
    // Generation done by ./generateTestcases.py
}

TEST(TEST08, StressAddition10_2) {
    // Generated test 1
    IntMatrix firstOp1{{-103, 98}, {-118, 135}, {-11, -86}, {137, -206}, {211, -84}, {47, -205}, {-196, 112}, {-196, -202}, {114, 120}, {244, -66}};
    IntMatrix secondOp1{{69, 178}, {86, 214}, {-42, -223}, {111, -128}, {-51, -31}, {-178, -79}, {-230, 27}, {-106, -56}, {-136, 119}, {-56, -54}};
    IntMatrix result1{{-34, 276}, {-32, 349}, {-53, -309}, {248, -334}, {160, -115}, {-131, -284}, {-426, 139}, {-302, -258}, {-22, 239}, {188, -120}};
    EXPECT_EQ(firstOp1 + secondOp1, result1);
    // Generated test 2
    IntMatrix firstOp2{{33, -206}, {-11, 180}, {-236, -148}, {170, -110}, {-197, 88}, {38, -79}, {-32, -47}, {240, -248}, {-20, 204}, {51, -226}};
    IntMatrix secondOp2{{-172, -28}, {212, 84}, {216, -25}, {176, 165}, {-229, -161}, {159, 153}, {-159, -173}, {-65, -227}, {-180, -59}, {-87, 147}};
    IntMatrix result2{{-139, -234}, {201, 264}, {-20, -173}, {346, 55}, {-426, -73}, {197, 74}, {-191, -220}, {175, -475}, {-200, 145}, {-36, -79}};
    EXPECT_EQ(firstOp2 + secondOp2, result2);
    // Generated test 3
    IntMatrix firstOp3{{-152, -240}, {2, -35}, {-67, -144}, {27, 50}, {-176, 240}, {125, -51}, {-21, -83}, {213, 24}, {165, 97}, {-69, -139}};
    IntMatrix secondOp3{{96, -24}, {-235, -56}, {-208, -86}, {-178, -221}, {153, 193}, {-221, -76}, {155, 190}, {-101, -193}, {211, -212}, {-209, -209}};
    IntMatrix result3{{-56, -264}, {-233, -91}, {-275, -230}, {-151, -171}, {-23, 433}, {-96, -127}, {134, 107}, {112, -169}, {376, -115}, {-278, -348}};
    EXPECT_EQ(firstOp3 + secondOp3, result3);
    // Generated test 4
    IntMatrix firstOp4{{-28, 36}, {-230, -246}, {-103, -115}, {-5, 10}, {160, 56}, {-95, -20}, {162, -64}, {94, -26}, {-70, -135}, {-223, 29}};
    IntMatrix secondOp4{{-25, -200}, {-58, -163}, {122, 38}, {-244, -137}, {-83, 31}, {169, -220}, {-54, 42}, {101, -122}, {-214, -17}, {-11, -162}};
    IntMatrix result4{{-53, -164}, {-288, -409}, {19, -77}, {-249, -127}, {77, 87}, {74, -240}, {108, -22}, {195, -148}, {-284, -152}, {-234, -133}};
    EXPECT_EQ(firstOp4 + secondOp4, result4);
    // Generation done by ./generateTestcases.py
}

TEST(TEST09, StressSubstraction) {
    // Generated test 1
    IntMatrix firstOp1{{-6416, -25694, 10328, -16368, -2360, -392, 15832, 11093, 4242, -30459, 30258, 3698, 11416, -32039, 29206}, {1894, -29792, 11397, -15058, 1925, -662, -16688, 4829, -28562, -27657, 23846, 8656, -1802, 8707, 32626}, {-22848, 31691, -26655, 11526, 26479, 23584, 767, -32235, -9928, 19031, -24684, -5077, 26779, 28322, -14115}, {32033, -22145, 30548, -16854, 20527, -28396, -10073, 5596, -19221, -9789, -17232, 26814, -29796, -28385, -5448}, {-20031, 11591, 4623, 18916, 9345, -18841, 16153, 11645, -21631, -32018, -7153, -24256, 21621, 6235, 17219}, {11664, 23553, -2, 6908, 22677, 22494, 2978, 8640, -22483, 10968, 96, 29644, 6447, 26986, 6275}, {-17873, 18346, -24718, 8860, -14756, 18357, -5638, 15508, 7926, 14936, 26711, -7192, -7853, -26946, 9093}, {11779, 23916, 4479, -19244, 17560, -1171, -18912, -23601, -2292, -5515, 10272, -23866, -26944, 11118, 12947}, {-8736, -27559, -8737, 18833, -5902, 26254, 23144, -30728, -29292, 8764, -24445, -14285, 30665, 22401, -1617}, {-3781, -202, -16345, -18266, -10959, 25175, -29989, -4182, -5715, 30457, 26433, 23860, 30285, 30096, 9935}, {-24456, -4172, 3758, 15264, -10160, 7582, -11769, 8153, 4863, 8947, 7757, -11614, -18987, 29284, -27779}, {15485, -24517, -16334, -32536, -7243, 8041, 10457, -11754, 30497, 20735, -24047, 26866, 13281, -1633, -26780}, {22631, -5080, -23134, 4438, -13488, -7235, 1866, -23766, 30724, 28683, 17469, 30784, -17740, -27828, -3592}, {-27057, 21613, -3447, -3511, 17434, 3147, 18965, -8922, -8895, -30542, -6027, -32000, 3564, 6180, -331}, {-8999, -28635, -25490, 16120, -15282, 3521, -27859, -8444, -1394, 26235, -20616, -25154, -12049, -6697, -25490}};
    IntMatrix secondOp1{{-27521, 29686, 887, -12717, 7782, -29346, 9738, -24398, -6636, -23333, -16270, -5162, 11958, -13523, -28438}, {-16156, -17182, -9479, -22214, 3794, -3157, -29330, -5934, -8237, -27168, 7608, 27913, 16123, -29703, -126}, {9816, 8888, 18090, -15938, -3867, 11475, 8098, 15720, -22180, -27375, -16023, -24429, 27562, -30173, -32553}, {29201, 11951, 7916, -3676, -24968, -4103, -9517, 20388, 4135, -23854, -11895, -18662, 3537, 22265, -15797}, {1006, 2607, -9094, -26123, 7534, 48, 24214, 7851, 21068, 31761, 18278, -2992, -3461, -13354, 20143}, {25417, -5599, -23033, -578, -21279, -3898, 7724, -3233, 15947, -23671, -19908, 20119, 986, -29179, 2676}, {13375, 21106, 1472, 17804, -2469, 12615, 30765, -19144, 9992, -1100, -23927, 9326, -21785, 12386, -26260}, {-30149, 24720, -24351, -28446, -21219, -29803, -26798, 13028, -12762, -25462, -3671, -19933, -24234, -10896, 9348}, {-14728, -2853, 27940, -2453, -16301, -16229, 27517, -7890, 425, 6630, 4174, 19426, -2839, -6508, -5176}, {-20320, 5031, -29128, 1038, 23934, 15892, 10176, 18618, -10790, -18214, -1346, 5584, 22147, 10488, 32452}, {31557, 1429, -18888, 17642, -5699, 32432, -16089, 28343, -32600, 26913, -28538, -18518, 6625, -23556, 19568}, {-4847, 22430, 32404, -16517, -25302, -31826, 13326, -29931, -20947, -27936, 11695, 5362, 12490, 24598, 27882}, {17252, -8010, 5479, -8758, -21364, -16778, 21210, -18754, 3669, -22809, -16163, 13411, 31448, 16591, 21603}, {22476, 16073, -11344, -18568, -31492, -27356, -818, 23027, -15715, -21028, -32058, -9596, 22411, -13944, -25549}, {-30755, 25730, -22135, -14453, -14171, 25486, -18388, 22745, -23558, 6638, -1382, -31552, -6510, 21642, -22135}};
    IntMatrix result1{{21105, -55380, 9441, -3651, -10142, 28954, 6094, 35491, 10878, -7126, 46528, 8860, -542, -18516, 57644}, {18050, -12610, 20876, 7156, -1869, 2495, 12642, 10763, -20325, -489, 16238, -19257, -17925, 38410, 32752}, {-32664, 22803, -44745, 27464, 30346, 12109, -7331, -47955, 12252, 46406, -8661, 19352, -783, 58495, 18438}, {2832, -34096, 22632, -13178, 45495, -24293, -556, -14792, -23356, 14065, -5337, 45476, -33333, -50650, 10349}, {-21037, 8984, 13717, 45039, 1811, -18889, -8061, 3794, -42699, -63779, -25431, -21264, 25082, 19589, -2924}, {-13753, 29152, 23031, 7486, 43956, 26392, -4746, 11873, -38430, 34639, 20004, 9525, 5461, 56165, 3599}, {-31248, -2760, -26190, -8944, -12287, 5742, -36403, 34652, -2066, 16036, 50638, -16518, 13932, -39332, 35353}, {41928, -804, 28830, 9202, 38779, 28632, 7886, -36629, 10470, 19947, 13943, -3933, -2710, 22014, 3599}, {5992, -24706, -36677, 21286, 10399, 42483, -4373, -22838, -29717, 2134, -28619, -33711, 33504, 28909, 3559}, {16539, -5233, 12783, -19304, -34893, 9283, -40165, -22800, 5075, 48671, 27779, 18276, 8138, 19608, -22517}, {-56013, -5601, 22646, -2378, -4461, -24850, 4320, -20190, 37463, -17966, 36295, 6904, -25612, 52840, -47347}, {20332, -46947, -48738, -16019, 18059, 39867, -2869, 18177, 51444, 48671, -35742, 21504, 791, -26231, -54662}, {5379, 2930, -28613, 13196, 7876, 9543, -19344, -5012, 27055, 51492, 33632, 17373, -49188, -44419, -25195}, {-49533, 5540, 7897, 15057, 48926, 30503, 19783, -31949, 6820, -9514, 26031, -22404, -18847, 20124, 25218}, {21756, -54365, -3355, 30573, -1111, -21965, -9471, -31189, 22164, 19597, -19234, 6398, -5539, -28339, -3355}};
    EXPECT_EQ(firstOp1 - secondOp1, result1);
    // Generated test 2
    IntMatrix firstOp2{{-11730, 22308, -7584, -30995, -25230, -19134, -14721, 23769, -16464, -30963, -24077, -2628, -13884, 13884, 13035}, {-7796, 28763, -29214, -13566, 12022, -12897, 6210, 28371, -15398, -32149, -6047, -18814, -2204, 10318, -7083}, {-6115, 2033, -30744, -19496, -8034, 9244, 367, 9463, -7259, 25180, 25373, 24483, -25489, 23678, -23653}, {-9140, 29008, 9350, 2405, -10955, 27903, 4320, -32383, 26653, 24333, -23074, -25791, 9384, -7176, 31554}, {31479, 22716, -5508, -1188, 29391, 8553, -6998, -13701, 10368, -19286, -8821, 18414, 10892, -13721, 4046}, {2048, -19521, -18807, -27000, 25340, 2345, -10211, -29676, 8718, -3185, 9070, 23967, -9853, 3051, 22602}, {-6187, -25330, 21821, 22139, -5252, -1840, 23317, 18953, -17966, 24624, 22301, -17, -30255, -8133, 21626}, {3790, -6633, -28871, 29586, 28137, 11675, 11877, 6496, -3556, 650, 19938, 10895, -8215, 32667, -9200}, {14847, -15044, 28843, 1537, 11495, -15118, -1919, -15641, -28353, 18877, 2300, -32190, -11148, -6317, -16956}, {20426, -6609, -27946, 1649, 23612, 29425, 28903, 8708, -22023, -30021, 13790, -29990, -21917, -32305, 9431}, {13427, -24906, 8373, 23759, -1818, 25376, 1263, 1568, -5743, 21181, -13373, 22406, -6326, -18466, -5174}, {-30250, 18190, 9481, -27297, 18094, 11925, 31971, 28460, 2160, 1329, -32748, 8263, 30356, 2517, -17657}, {-7870, -32314, -17574, -27197, -3651, -18015, -15997, -16969, 10158, 21059, -31466, -27893, -25039, -15786, -5665}, {5886, -2113, 7590, -21978, -13545, -4094, 28354, -30481, -18557, 126, -2742, 31488, -27640, -6618, 20216}, {-27856, -16737, 19418, -1047, 12715, 29182, -21090, -20507, 15165, 17491, 2993, -236, 26199, -29200, 19418}};
    IntMatrix secondOp2{{2155, -9785, -23819, 12771, -19501, -18273, 6395, 20919, 28194, 18852, 2960, -22711, -22692, 8207, -13328}, {-7245, -388, 15366, -163, 6705, -9238, 26414, -10899, 23581, -205, -4736, -17222, 23606, 21013, -11911}, {-8849, -21640, 26527, 2191, 7282, -26635, 3855, 19980, -9079, 25731, 3954, 24255, -14260, 24685, -17647}, {-1311, -23102, -11211, 23581, 12970, 410, -29186, -20548, 11344, 16136, -7058, -7277, 31012, -2123, 630}, {-17345, -15983, 22175, -15519, -20020, 2857, -12564, 22326, -26902, -27742, 24505, -15252, -23153, -32671, -21289}, {29801, 14748, 9369, -24336, -21606, 1072, 1395, 30125, -13854, -740, 7645, -3018, -6701, 15841, 3814}, {3955, 26209, 6025, -15141, 793, 22539, 20710, 727, -14000, -18869, 4215, 30551, -19150, 23838, -15004}, {-5802, -24099, -7586, -20504, -20760, -18579, 32496, -10430, -13492, 937, -26926, 19023, 7460, -3318, 49}, {6467, 4240, 26288, 14368, 20950, 32544, -31184, -2440, 9478, 25535, 5836, -32118, -5751, 5663, 21104}, {23204, 352, 19556, 14988, 13831, -23268, 1233, -19693, -7622, -27121, 23304, -15612, -27492, -11339, 5018}, {3205, 18479, 11917, -18844, -6982, -7915, 19000, 13648, 19837, -25684, 1498, 6789, -20846, -25800, 31434}, {-31494, -17480, -24826, -9710, -13796, 25646, -1334, -4430, -7882, 20011, 17493, 556, 26976, 30957, -11763}, {30103, 22810, 18476, -6959, -6094, 12748, 3863, -20633, -11369, -17160, 2312, -31361, -7319, -6057, 19258}, {27442, -12330, 32388, -9159, 19501, 8567, 18109, -7125, 6117, 16142, -26354, 25298, 12977, 14011, 30314}, {23883, 17264, 14746, 22419, 13970, 2039, -26547, -25098, -26258, -25953, -14467, 11947, -16043, 9552, 14746}};
    IntMatrix result2{{-13885, 32093, 16235, -43766, -5729, -861, -21116, 2850, -44658, -49815, -27037, 20083, 8808, 5677, 26363}, {-551, 29151, -44580, -13403, 5317, -3659, -20204, 39270, -38979, -31944, -1311, -1592, -25810, -10695, 4828}, {2734, 23673, -57271, -21687, -15316, 35879, -3488, -10517, 1820, -551, 21419, 228, -11229, -1007, -6006}, {-7829, 52110, 20561, -21176, -23925, 27493, 33506, -11835, 15309, 8197, -16016, -18514, -21628, -5053, 30924}, {48824, 38699, -27683, 14331, 49411, 5696, 5566, -36027, 37270, 8456, -33326, 33666, 34045, 18950, 25335}, {-27753, -34269, -28176, -2664, 46946, 1273, -11606, -59801, 22572, -2445, 1425, 26985, -3152, -12790, 18788}, {-10142, -51539, 15796, 37280, -6045, -24379, 2607, 18226, -3966, 43493, 18086, -30568, -11105, -31971, 36630}, {9592, 17466, -21285, 50090, 48897, 30254, -20619, 16926, 9936, -287, 46864, -8128, -15675, 35985, -9249}, {8380, -19284, 2555, -12831, -9455, -47662, 29265, -13201, -37831, -6658, -3536, -72, -5397, -11980, -38060}, {-2778, -6961, -47502, -13339, 9781, 52693, 27670, 28401, -14401, -2900, -9514, -14378, 5575, -20966, 4413}, {10222, -43385, -3544, 42603, 5164, 33291, -17737, -12080, -25580, 46865, -14871, 15617, 14520, 7334, -36608}, {1244, 35670, 34307, -17587, 31890, -13721, 33305, 32890, 10042, -18682, -50241, 7707, 3380, -28440, -5894}, {-37973, -55124, -36050, -20238, 2443, -30763, -19860, 3664, 21527, 38219, -33778, 3468, -17720, -9729, -24923}, {-21556, 10217, -24798, -12819, -33046, -12661, 10245, -23356, -24674, -16016, 23612, 6190, -40617, -20629, -10098}, {-51739, -34001, 4672, -23466, -1255, 27143, 5457, 4591, 41423, 43444, 17460, -12183, 42242, -38752, 4672}};
    EXPECT_EQ(firstOp2 - secondOp2, result2);
    // Generated test 3
    IntMatrix firstOp3{{-21467, 29006, 21408, 8433, 19659, 31093, 31999, -21329, -20231, -4919, -30389, -21946, 12596, 12563, -32350}, {2160, 16326, -4965, -18971, -22282, -9551, -15643, -17709, -27754, 25967, 32466, 10945, -17965, -7843, -15587}, {13740, 9565, -2607, -28685, 6642, 12583, 8370, 4090, 15848, 7527, 25803, 15504, 17442, 10759, -2936}, {17220, -23840, -26636, 15259, 13234, 14975, 7454, -7303, -15470, -10259, -4477, -20427, 11388, -16695, 3609}, {16773, -28527, -19495, 11873, -9734, -27061, -18281, 11283, 3558, -10621, 27832, -6360, -10029, 462, -24962}, {-2583, -22555, 13485, -31551, -13692, -22904, 12149, -6099, 25739, 8672, 14369, 27047, -31785, -20231, 9978}, {-6858, 20247, -1914, 14296, 2703, 1368, 1229, 850, 32288, -15708, 8849, -12148, 12470, -27038, -21331}, {25169, 5185, -20126, -10006, -18962, -28075, -23008, 19356, 20815, 29093, 18290, -29893, -507, -12283, 32444}, {-28885, -5897, 22734, -28063, 361, 5323, 15032, 13845, -15546, 25120, -9066, -31804, 27740, -1331, -3668}, {18485, 3446, 29698, -6003, -12659, 27339, 21739, 20570, -21806, 31516, -27997, 32488, 14098, -30410, 8983}, {24576, -31630, -14131, 13378, 24385, -12239, 23265, 11479, -15264, -12544, 15840, 25123, 1311, 2688, -12492}, {-30548, -9338, -2838, 13487, 4984, 30595, 20829, -21329, 8744, 30445, -11592, -22606, 21914, 11617, -12192}, {12715, -12683, 31811, -2980, -11042, -17529, -28417, 31917, -14318, 21516, -15611, -12360, 32689, -2493, -28985}, {11012, -21866, 1804, 28364, 16935, -4459, 28285, -25273, 13728, 17780, 17025, -30153, 21340, 10810, 21064}, {-23082, -27744, 31855, -7344, -8464, 9053, 14275, 27896, -17329, 22989, 30657, -12315, -26582, -28680, 31855}};
    IntMatrix secondOp3{{-22256, -31340, 17977, -13735, 22109, 18848, -22621, 25770, -11670, -20539, 11849, 21918, 22483, -7609, 21373}, {2416, 26339, -11962, -18093, -18997, 20057, -25459, 5891, 31202, 30991, 3507, -32029, 24756, -5573, -4655}, {-1735, 31918, 19788, -22095, -187, -15603, 27060, 2107, -30905, -28872, -27187, 7285, 17746, 1463, -27213}, {-11604, -5780, 5769, -3918, 16879, 346, -3740, 9905, -5051, -18216, 16390, -13996, 3217, -6552, 22689}, {-30931, -5845, -13346, -23627, 31577, -18215, -5738, 404, -14068, -21392, -3168, 9686, -11472, 19650, 2115}, {32203, -15551, -26747, -86, -1800, -31019, 2840, -1285, -18876, -12985, 22860, -2883, -32727, 305, -7572}, {28628, -140, -19975, 564, 5557, -3551, -21826, 105, 26536, -14327, -2143, 1186, 983, 13332, 8876}, {16368, -8898, 32299, -504, -22892, -4329, 19768, 14933, 23741, 12842, -11536, -20807, -5264, -11130, -8229}, {-12156, -26116, -9644, -15961, 1918, 7756, -9869, -28791, 25889, 20764, -32501, -28451, -31035, -4208, 30899}, {-14342, 4901, 24038, 11191, 25438, 19467, -25480, -16718, -15458, -24893, 27503, -18516, 28513, -9224, -29744}, {-7716, 31910, -31815, -19814, 24947, 12445, 10325, 21867, 13836, -26288, 19110, -4423, -31663, -31221, 28679}, {5712, -3734, 28220, -5092, 5295, 1697, 10966, -9345, 6724, 9016, -97, -23667, 32033, -11737, 3738}, {-10145, 11094, -15142, 24071, 29034, 25092, 29635, -13343, 24781, -25183, 28104, 22849, -25382, 25134, 15660}, {6000, 18052, -17881, 9095, -23811, 8701, 23762, -9082, 11057, 9925, -13876, -52, -17651, 13842, 1557}, {20682, 2599, -19451, 21522, -3000, 771, -26827, -3268, -14109, -6485, 28114, 2472, 31658, -4203, -19451}};
    IntMatrix result3{{789, 60346, 3431, 22168, -2450, 12245, 54620, -47099, -8561, 15620, -42238, -43864, -9887, 20172, -53723}, {-256, -10013, 6997, -878, -3285, -29608, 9816, -23600, -58956, -5024, 28959, 42974, -42721, -2270, -10932}, {15475, -22353, -22395, -6590, 6829, 28186, -18690, 1983, 46753, 36399, 52990, 8219, -304, 9296, 24277}, {28824, -18060, -32405, 19177, -3645, 14629, 11194, -17208, -10419, 7957, -20867, -6431, 8171, -10143, -19080}, {47704, -22682, -6149, 35500, -41311, -8846, -12543, 10879, 17626, 10771, 31000, -16046, 1443, -19188, -27077}, {-34786, -7004, 40232, -31465, -11892, 8115, 9309, -4814, 44615, 21657, -8491, 29930, 942, -20536, 17550}, {-35486, 20387, 18061, 13732, -2854, 4919, 23055, 745, 5752, -1381, 10992, -13334, 11487, -40370, -30207}, {8801, 14083, -52425, -9502, 3930, -23746, -42776, 4423, -2926, 16251, 29826, -9086, 4757, -1153, 40673}, {-16729, 20219, 32378, -12102, -1557, -2433, 24901, 42636, -41435, 4356, 23435, -3353, 58775, 2877, -34567}, {32827, -1455, 5660, -17194, -38097, 7872, 47219, 37288, -6348, 56409, -55500, 51004, -14415, -21186, 38727}, {32292, -63540, 17684, 33192, -562, -24684, 12940, -10388, -29100, 13744, -3270, 29546, 32974, 33909, -41171}, {-36260, -5604, -31058, 18579, -311, 28898, 9863, -11984, 2020, 21429, -11495, 1061, -10119, 23354, -15930}, {22860, -23777, 46953, -27051, -40076, -42621, -58052, 45260, -39099, 46699, -43715, -35209, 58071, -27627, -44645}, {5012, -39918, 19685, 19269, 40746, -13160, 4523, -16191, 2671, 7855, 30901, -30101, 38991, -3032, 19507}, {-43764, -30343, 51306, -28866, -5464, 8282, 41102, 31164, -3220, 29474, 2543, -14787, -58240, -24477, 51306}};
    EXPECT_EQ(firstOp3 - secondOp3, result3);
    // Generated test 4
    IntMatrix firstOp4{{-12576, -23405, -6319, 9248, 31368, 13208, 29787, -17005, 11972, 29352, 28604, 23971, -8193, 1781, 268}, {31740, 14278, 868, 4590, -32175, 28488, 0, -9450, -11646, 27072, -16045, -9124, 5252, 9803, 4944}, {24214, 31955, 11037, 23047, 30293, 22107, -29686, -31202, -14448, 29557, -6427, 6033, -8939, 15088, 6433}, {-4024, 27278, -12502, -28072, -28839, -29597, 2396, -6946, -14515, -5241, 26903, 27954, -32531, 26518, -21541}, {5612, 32685, 12766, -21433, -9543, 23445, -10863, 14214, -18882, -2215, 7778, 17303, -12473, -18453, -17439}, {-9092, -9020, 18784, -15031, -25922, 9882, 7939, 22584, -8370, -27181, -4870, -19743, 10621, -19307, 8886}, {22646, 11822, 2096, 14412, -28490, 6257, 1488, -15190, -9786, -9527, -6451, 25142, 13732, -4897, 13712}, {18762, 30478, -14438, 10635, -3855, 30072, 10890, -2212, -18899, -15970, -1373, 10049, 12794, 22935, -11431}, {27925, 8749, -15986, -3571, 3759, 12143, -26947, 23258, 3202, -6628, 16462, -29929, 7747, 19030, -18907}, {12378, 21998, 14019, 1839, -7172, -13739, 9861, -23769, -19798, -12174, -22277, 19774, 7997, 22307, -12323}, {19699, -15488, 25291, -17031, -12649, 19947, -9473, 21606, -20706, -10004, 11002, 20235, 24768, 21914, -1850}, {26153, -24821, 27164, 7654, 16647, 7173, 28194, 2283, -23269, 24345, -3464, 32523, -12868, 22073, -4342}, {-6884, 5329, 4744, -29570, 19418, 27248, 451, 30383, 15514, 8959, -2944, -17330, 19141, 9223, 15367}, {-11246, 12343, 4466, 21158, 985, 17652, -32220, 14938, 19665, 15952, 6125, -10121, 24821, 26544, 1152}, {-29926, 23761, -19004, -10277, 32706, 8931, 26408, 19737, 21831, -2743, 10312, -12071, -18568, 22461, -19004}};
    IntMatrix secondOp4{{-4438, -11066, 3699, -8666, 15284, 20303, 12030, -3929, 5473, 14081, 10892, 18205, -14398, 5815, 1928}, {3390, -6017, 27704, -19837, -3775, -9224, 23146, 125, 17674, -8796, 28254, 30948, 20581, 14822, 24968}, {24423, -30200, -20520, -25139, 24577, -26962, -11806, 15769, 29703, 12109, -15596, -7207, -20539, 29528, -19570}, {-28873, 29870, 32530, -13190, -20761, 17448, -23820, 22672, 22586, -10401, -18175, -29909, -4173, 30299, 32625}, {-13277, -25895, -8325, -24805, 28676, -17249, -2514, -4824, 26285, -9210, -31896, -30359, -20895, 8972, 30426}, {-14893, 20011, -6372, -3251, 29258, 6385, -1889, 8187, 11182, 2681, 7574, -22957, 15792, -16667, 2324}, {31571, 29945, -10416, 3590, 5426, -27581, -10055, -11802, -5679, -7131, 32723, -30745, 14448, -14280, -19571}, {32182, -6204, 3705, -25837, -1625, 4934, -18220, 12111, 10032, 32027, 3929, -11366, -11725, -27085, 2843}, {-15370, -496, 13492, -29800, -2642, 23986, 17424, -4644, 8479, 16854, 31906, -13843, -6228, 4813, 3539}, {23695, 20470, -23773, -24016, 9885, 833, -1395, -11736, 12727, 1694, -24945, 18207, -20151, 6992, -4612}, {-15595, -24118, 24622, 795, 17105, 20145, 25096, -11712, 29590, -26443, 18280, 20688, 1016, 21057, 22042}, {-29476, -27671, 23457, 3239, -25317, -25674, 14550, 22099, 10032, 4561, 12732, 1717, 3705, -18067, 17619}, {-18655, -1198, 19432, -3919, 15402, -24036, -18739, -25618, -19872, 15296, 6231, -6878, 7436, -32126, 8439}, {-12517, -4707, -17564, -15268, -27324, 17467, 1246, -29674, 20710, -29752, 26285, -970, -20828, 22839, 19007}, {-2229, 13221, -3680, -10072, 8893, -5635, 28826, -15353, 7660, -2941, 7917, -25050, -19140, 32350, -3680}};
    IntMatrix result4{{-8138, -12339, -10018, 17914, 16084, -7095, 17757, -13076, 6499, 15271, 17712, 5766, 6205, -4034, -1660}, {28350, 20295, -26836, 24427, -28400, 37712, -23146, -9575, -29320, 35868, -44299, -40072, -15329, -5019, -20024}, {-209, 62155, 31557, 48186, 5716, 49069, -17880, -46971, -44151, 17448, 9169, 13240, 11600, -14440, 26003}, {24849, -2592, -45032, -14882, -8078, -47045, 26216, -29618, -37101, 5160, 45078, 57863, -28358, -3781, -54166}, {18889, 58580, 21091, 3372, -38219, 40694, -8349, 19038, -45167, 6995, 39674, 47662, 8422, -27425, -47865}, {5801, -29031, 25156, -11780, -55180, 3497, 9828, 14397, -19552, -29862, -12444, 3214, -5171, -2640, 6562}, {-8925, -18123, 12512, 10822, -33916, 33838, 11543, -3388, -4107, -2396, -39174, 55887, -716, 9383, 33283}, {-13420, 36682, -18143, 36472, -2230, 25138, 29110, -14323, -28931, -47997, -5302, 21415, 24519, 50020, -14274}, {43295, 9245, -29478, 26229, 6401, -11843, -44371, 27902, -5277, -23482, -15444, -16086, 13975, 14217, -22446}, {-11317, 1528, 37792, 25855, -17057, -14572, 11256, -12033, -32525, -13868, 2668, 1567, 28148, 15315, -7711}, {35294, 8630, 669, -17826, -29754, -198, -34569, 33318, -50296, 16439, -7278, -453, 23752, 857, -23892}, {55629, 2850, 3707, 4415, 41964, 32847, 13644, -19816, -33301, 19784, -16196, 30806, -16573, 40140, -21961}, {11771, 6527, -14688, -25651, 4016, 51284, 19190, 56001, 35386, -6337, -9175, -10452, 11705, 41349, 6928}, {1271, 17050, 22030, 36426, 28309, 185, -33466, 44612, -1045, 45704, -20160, -9151, 45649, 3705, -17855}, {-27697, 10540, -15324, -205, 23813, 14566, -2418, 35090, 14171, 198, 2395, 12979, 572, -9889, -15324}};
    EXPECT_EQ(firstOp4 - secondOp4, result4);
    // Generated test 5
    IntMatrix firstOp5{{22276, 4805, 11783, -15897, -6229, -3184, -15763, 13732, -22707, -1397, -16620, -26322, -4295, 3967, 12438}, {-27297, -22227, -19024, 18589, -25994, -28660, -7808, 29106, -1055, 8050, 8246, 27144, 27528, -28001, 10376}, {14632, -27850, 28242, 311, 8240, 7002, 32000, 19819, 24682, 7418, 14056, 11643, 3055, -17680, 7665}, {-7780, -1796, -1170, -27659, -20664, -16838, -21354, -14218, 1484, -28823, -16846, 29842, -28874, 24087, 26619}, {-15463, 3957, -23168, -22951, -21941, 23626, 27421, 15450, 28550, -2745, -12142, 11045, 7975, -828, -3806}, {-1660, 1409, 5124, -7997, -30048, 29020, 29475, -29948, -9303, 23716, -2182, 23666, -8265, -11661, -6037}, {-8088, 28959, -32498, 17757, 14560, -10953, 8539, -20055, 2289, 31692, -18772, 15013, 31080, 18495, 30784}, {11428, -6801, 1305, -28853, -3635, -2169, -4309, -10688, 23226, -31830, -13518, -8510, 1729, 27394, 2097}, {-8705, 17385, -15960, 5190, 24066, 25713, -32220, -16397, 11475, -14993, 15479, 24478, -30247, -31294, 19001}, {-18535, 26015, -5422, 11018, 11468, 2171, 12376, 8371, -24399, 28320, 15259, -19186, 19865, -31650, 15886}, {11890, 6697, 473, 32484, -21879, -7718, -29539, 15017, -23624, 23695, -12627, -18229, -10438, 27180, 10201}, {-32493, 11695, 24672, -29142, -21462, 12051, 4709, -12409, -21006, 18937, 28754, -9377, 27540, -22907, 18518}, {-19028, -26089, 3366, -19560, 17918, -27504, -28697, -27914, -13994, -23211, -18181, -30436, -4434, 839, 11205}, {4171, 29792, -13928, 16439, 14213, 18595, -13119, 3692, 25553, -20311, 10486, -21424, 16253, 23789, -30609}, {-31204, 7071, 24322, 18284, 18411, -29310, 17190, -4462, -12319, 1781, -14781, 3919, 9388, 25196, 24322}};
    IntMatrix secondOp5{{9490, 5916, -16522, -9567, 23856, 20650, -11804, -24139, 26158, 5319, -2976, 22711, -31385, -7797, 31734}, {-16562, -27184, 18262, -24773, 20239, -16887, -16766, 2771, 3355, 22521, -32668, 12623, -9790, -12230, -27504}, {32054, -28175, -29957, -15106, -25608, -24537, -24291, 3059, -2727, 3465, -10276, 10104, -22864, -30365, -21739}, {84, -23441, 6633, -713, -29770, -11105, 28692, 22384, 28754, -11163, 24790, -4482, -15702, 18258, -22736}, {8959, -10923, 17545, 9173, 7349, -23509, 3722, 18325, 31622, -29290, 5244, -24835, 4806, -14755, -2147}, {940, -6748, 17852, -20062, -7644, -11102, 11723, 20304, -26641, -9553, -16705, -1443, 13284, -7705, 3796}, {-26716, 4119, -17195, -29494, -15909, 10024, 21965, 29049, 3999, 30201, -15140, 7117, 23245, -21919, -17932}, {-18851, 23307, -15885, 1817, 29052, -21636, -17122, -10441, 10330, 16115, -15539, 28731, 25453, 32082, 2024}, {-6149, -12450, 10178, -4067, -14348, -18778, 7267, 18611, -26763, 7111, 9185, 16858, 1432, -27805, 14403}, {-19076, 17305, -31184, -31213, -31401, 12128, -29067, 1546, 10676, -8502, -17389, -4725, -2530, 21957, 23817}, {-31527, 20212, 30853, 17970, -3698, 17323, -29291, -5333, -13191, 623, 26904, 215, -15765, 3585, -31937}, {-30010, 17831, -5923, 1745, 5353, 22362, -24197, -8265, 22858, -20397, -26249, -15895, -10211, -11955, 8741}, {-18502, -27298, -13242, -16588, -23684, -845, -19107, 245, -7399, 26458, -31188, 24941, -16225, -18434, -8163}, {-14543, 25871, -13743, -5574, 28345, -13208, -9918, 25672, -3606, -28129, 28241, 22642, -2687, -13156, -11077}, {-29538, -202, -10474, -16744, 16503, 26942, -32614, 16316, 9879, -20288, 32072, 10928, -29202, -2074, -10474}};
    IntMatrix result5{{12786, -1111, 28305, -6330, -30085, -23834, -3959, 37871, -48865, -6716, -13644, -49033, 27090, 11764, -19296}, {-10735, 4957, -37286, 43362, -46233, -11773, 8958, 26335, -4410, -14471, 40914, 14521, 37318, -15771, 37880}, {-17422, 325, 58199, 15417, 33848, 31539, 56291, 16760, 27409, 3953, 24332, 1539, 25919, 12685, 29404}, {-7864, 21645, -7803, -26946, 9106, -5733, -50046, -36602, -27270, -17660, -41636, 34324, -13172, 5829, 49355}, {-24422, 14880, -40713, -32124, -29290, 47135, 23699, -2875, -3072, 26545, -17386, 35880, 3169, 13927, -1659}, {-2600, 8157, -12728, 12065, -22404, 40122, 17752, -50252, 17338, 33269, 14523, 25109, -21549, -3956, -9833}, {18628, 24840, -15303, 47251, 30469, -20977, -13426, -49104, -1710, 1491, -3632, 7896, 7835, 40414, 48716}, {30279, -30108, 17190, -30670, -32687, 19467, 12813, -247, 12896, -47945, 2021, -37241, -23724, -4688, 73}, {-2556, 29835, -26138, 9257, 38414, 44491, -39487, -35008, 38238, -22104, 6294, 7620, -31679, -3489, 4598}, {541, 8710, 25762, 42231, 42869, -9957, 41443, 6825, -35075, 36822, 32648, -14461, 22395, -53607, -7931}, {43417, -13515, -30380, 14514, -18181, -25041, -248, 20350, -10433, 23072, -39531, -18444, 5327, 23595, 42138}, {-2483, -6136, 30595, -30887, -26815, -10311, 28906, -4144, -43864, 39334, 55003, 6518, 37751, -10952, 9777}, {-526, 1209, 16608, -2972, 41602, -26659, -9590, -28159, -6595, -49669, 13007, -55377, 11791, 19273, 19368}, {18714, 3921, -185, 22013, -14132, 31803, -3201, -21980, 29159, 7818, -17755, -44066, 18940, 36945, -19532}, {-1666, 7273, 34796, 35028, 1908, -56252, 49804, -20778, -22198, 22069, -46853, -7009, 38590, 27270, 34796}};
    EXPECT_EQ(firstOp5 - secondOp5, result5);
    // Generation done by ./generateTestcases.py
}

TEST(TEST10, StressMultiplication10_10) {
    // Generated test 1
    IntMatrix firstOp1{{74, -169, 102, -172, 63, 29, 2, 126, 16, -28}, {98, 20, 217, -150, 208, 164, -109, -204, 35, 220}, {35, -69, 223, -224, 14, -226, -192, -208, 166, 225}, {7, -91, -256, -243, 253, 88, 193, -212, 231, -62}, {52, -144, -34, -60, -98, -192, 240, -81, -6, 187}, {-182, 166, -162, -91, 61, 69, -11, -251, 214, 6}, {68, -13, -60, -30, 245, 62, -62, -156, -19, -23}, {-185, -130, -227, -95, -27, -153, -99, 103, -142, 243}, {154, -184, 136, 22, 228, -160, -56, 124, -66, -226}, {-92, -214, -167, 193, -16, -121, 160, 194, 7, -102}};
    IntMatrix secondOp1{{-128, -41, 176, 29, 143, 155, -211, 2, 53, -13}, {79, -45, 97, -184, -161, -6, 202, -188, 40, 35}, {176, 199, 148, 74, -78, 42, 92, -40, 149, 138}, {69, 83, -103, 103, -249, 106, -160, -190, 189, -161}, {-25, -117, 63, -135, 235, -143, -252, -17, 57, 229}, {-211, -103, 225, -190, -48, 217, 132, 65, 120, -56}, {-80, -166, -6, -238, 71, 65, 180, -233, 253, 134}, {-235, 138, -12, 162, 3, -212, -172, 30, -256, 142}, {26, -216, -44, 208, -48, -200, 68, -159, -4, 144}, {-246, 143, -123, 10, -224, -186, 202, 195, 40, -147}};
    IntMatrix result1{{-46899, 9831, 41153, 32043, 92100, -28754, -50776, 56644, -46011, 72274}, {-19476, -1571, 91260, -57096, 12915, 2371, 58846, 79992, 74820, 21096}, {74403, 48582, -25756, 96969, -3990, -103017, 59627, 87731, -23328, 15395}, {-39163, -226026, 14133, -110751, 167225, -29141, 17717, -25197, 37338, 91664}, {-31517, 863, -76247, -602, 9595, -27324, 60262, 8191, 40924, -20133}, {49488, -132221, -18241, -72000, -19584, -30825, 122282, -42177, 28271, 3394}, {5216, -62105, 40211, -62719, 79760, 20457, -61516, 18847, 33285, 18029}, {-79894, 75364, -129390, 37829, -17501, -121908, -2407, 137834, -127809, -70600}, {48486, 29006, 35032, 67700, 147008, -8998, -220794, -5804, -35668, 101778}, {-28390, -5363, -100828, 63163, 22769, -36657, -106696, -49998, -30566, 7689}};
    EXPECT_EQ(firstOp1 * secondOp1, result1);
    // Generated test 2
    IntMatrix firstOp2{{133, 9, -253, 186, -168, -226, 135, -184, 70, 115}, {-219, -89, 240, 73, -132, 218, -61, 133, 149, 98}, {78, 20, 88, 5, 169, -110, 1, 107, 91, -194}, {-251, -113, 5, 98, -126, -80, -69, -195, -33, 139}, {-14, 15, -159, -85, 69, -135, -3, -31, -142, -23}, {-105, 137, -57, 230, -53, -160, -131, -29, -94, -47}, {-121, 62, 70, 22, 149, 23, 139, 177, 226, 141}, {63, 47, 61, -248, 18, -152, 125, -106, -56, 13}, {-85, 45, 13, 150, -158, -159, 193, -153, 220, -152}, {164, -255, 94, 119, -106, 126, -30, 96, 10, 75}};
    IntMatrix secondOp2{{-230, 251, -119, -104, 237, -195, -115, 91, -227, -76}, {-218, -157, -222, -55, -215, 104, -16, 230, -127, 250}, {-46, 145, -89, -183, -230, 141, 104, 223, -245, 179}, {135, 112, -25, 22, 72, -158, -92, -61, 138, -217}, {-242, -246, -112, -190, 157, 5, 231, 193, 154, -88}, {236, 119, 93, -3, 81, -172, -221, 144, -256, 52}, {144, -52, 136, -85, -185, -29, 162, 232, -43, -16}, {-68, 97, -184, -25, -46, 250, -256, 86, -132, -135}, {63, 218, 158, -205, 237, 50, 9, -190, -15, -193}, {-84, 187, 81, -163, 213, 18, 60, 125, -207, 127}};
    IntMatrix result2{{18218, 42448, 70431, 28692, 81060, -96373, 28779, -101989, 81931, -66700}, {135306, 127275, 56404, -34876, -24424, 61832, -70526, -4190, -101300, 11175}, {-77634, -31019, -71725, -46779, -12933, 46032, 24700, 15688, 37696, -63515}, {96545, -8611, 91273, 52588, -12027, -10353, 57536, -98665, 85132, 28834}, {-58107, -109591, -24674, 49042, -12767, 3689, 43220, -13476, 84796, 10424}, {-15844, -61653, -58679, 68217, -52671, 8604, -11552, -58956, 105539, -3355}, {-6192, 24168, 12771, -117084, 18471, 87283, 35215, 71741, -39381, -31294}, {-80662, -59572, -4603, -27334, -65298, 33931, 106575, 59009, -20989, 86978}, {94928, 4891, 74975, 4879, -68598, -9637, 58542, -86208, 87528, -51074}, {68481, 176304, 35254, -11978, 93684, -59530, -93130, -23566, -87088, -74216}};
    EXPECT_EQ(firstOp2 * secondOp2, result2);
    // Generated test 3
    IntMatrix firstOp3{{-182, -256, 193, -134, 92, -215, 9, 51, 69, 239}, {-163, -64, 98, -53, 240, -213, -109, -24, 88, -227}, {-208, -150, -250, 101, 59, 99, -177, 161, 223, 88}, {235, -232, 254, -154, -23, -26, 52, 212, -91, -140}, {91, -193, -167, -78, -173, -200, 94, 149, 143, 36}, {152, -65, -129, -11, 228, 142, -35, 200, 208, -2}, {-91, -173, -107, -78, 102, 3, -127, 254, 71, 32}, {139, 24, 170, 114, -62, -246, 44, -125, 77, 83}, {-193, 69, 194, 31, 192, 63, 110, 124, -174, 73}, {-209, -44, -150, -197, 68, -233, -93, -146, 44, 129}};
    IntMatrix secondOp3{{123, -86, -68, -225, -23, -85, 32, -4, -133, -79}, {-151, 49, -151, 92, 80, -26, -66, -140, 226, 108}, {-133, -174, 153, 71, -102, -53, 84, 101, -73, -255}, {83, 197, 221, -162, 249, -49, -231, -230, 22, -198}, {-4, 165, 9, 242, 131, -174, -222, 233, -10, 30}, {-65, -188, 217, -166, 221, 68, -49, 156, -249, -179}, {-50, -103, 78, -102, -195, -41, -11, -12, -69, -100}, {199, -250, -66, 88, 126, 155, 57, -101, 242, -143}, {-164, 126, 72, -34, 140, 227, 96, 97, -135, 47}, {-187, 56, 152, 220, 127, 27, -212, 173, 103, 39}};
    IntMatrix result3{{-53224, 7129, 43752, 164567, -60125, 17487, 7113, 117558, 28951, 9663}, {13758, 78636, -55118, 95843, -38475, -28726, 33043, 27389, 15984, 46411}, {19889, 76065, 47879, 40732, 170238, 111556, -45160, 25261, 19129, 36623}, {99847, -182681, -19737, -46841, -110926, -11334, 118578, 28116, -53332, -119188}, {64532, -21434, -51525, -39536, -61748, 79132, 81401, -39858, 20259, 38024}, {42425, -5353, 8919, -2295, 123864, 45727, -24538, 73319, -40840, -17935}, {61352, -20814, -16423, 73716, 64543, 65740, 10652, 44244, 41275, 14720}, {-38661, 59186, 14030, -9479, -55728, -34434, -1185, -31863, 3777, -11806}, {-28189, -48000, 53601, 116199, 16050, -49131, -73628, 40047, 63603, -72489}, {-56334, 116980, -70422, 142897, -52769, 3490, -4979, 59099, 60238, 170039}};
    EXPECT_EQ(firstOp3 * secondOp3, result3);
    // Generated test 4
    IntMatrix firstOp4{{160, 185, 142, 63, 29, -162, 235, -21, 228, -174}, {-43, -253, 77, -238, 68, -233, -125, 96, 95, 102}, {-117, -241, 198, 27, 83, 129, -43, 176, -85, 91}, {-93, -55, 254, -121, -254, 50, 63, -198, -95, -231}, {68, 111, 115, -147, -171, -8, -35, -52, 227, 83}, {246, 42, -183, -32, -124, 87, -74, -31, 98, 94}, {-38, -210, -88, 254, 149, -124, 54, 198, 106, 23}, {97, -237, -202, -102, 239, -137, 15, -140, 248, -61}, {252, -204, -124, 90, -159, -110, -134, -131, 250, 116}, {-26, 47, -231, 58, -10, 1, -3, 28, 163, -90}};
    IntMatrix secondOp4{{-3, -90, 43, -172, -225, 194, -179, -89, -153, -255}, {113, 59, -37, 204, 74, 130, 190, -174, 250, -154}, {156, -131, -52, 152, -73, -6, 22, 245, -146, -6}, {-118, 5, -236, -189, -75, 189, -106, 127, -214, -53}, {-222, -104, -136, -222, 161, -125, 75, -26, 231, 132}, {23, 154, -77, 207, -24, 14, -215, -116, 143, 227}, {-245, 184, -48, 206, -169, 190, 13, -193, -218, -21}, {-98, 6, 152, -144, -213, -74, -106, -171, -182, 5}, {233, -111, 114, 212, 38, 172, -80, 90, -190, -122}, {200, -146, 91, 148, -9, -105, -107, 70, 47, -109}};
    IntMatrix result4{{-12214, -6526, -18001, 53943, -53856, 163942, 45620, -19025, -127817, -120317}, {54933, -113149, 109073, -55195, 23091, -123662, 11429, 85147, -38070, -1439}, {-22957, -28965, -6596, -34524, -31991, -104051, -67015, 64087, -41646, 106803}, {41138, 60037, -20893, 120153, -4710, 17402, 48935, 62493, -32740, 49352}, {168565, -42886, 78608, 153203, -6925, 47939, -6059, 31401, -30766, -87987}, {71567, -7959, 54823, 13933, -36548, 60172, -80267, -49986, -2203, -83826}, {-106582, -34764, -18267, -147944, -40130, 4926, -55350, 28000, -138374, 5033}, {-47128, -59417, 26282, -91077, 62058, 420, -6923, 18934, -14930, -5792}, {106114, -88554, 59262, -46862, -33448, 73511, -104679, 89895, -132165, -123813}, {-17278, 31521, 11542, -13001, 21754, 49522, -5028, -50788, -4767, -13262}};
    EXPECT_EQ(firstOp4 * secondOp4, result4);
    // Generated test 5
    IntMatrix firstOp5{{-244, -200, -58, -248, 164, -241, 214, -38, -104, -23}, {153, -94, -98, -40, -130, -205, 144, -10, 214, 24}, {88, 136, -108, -173, -128, 130, 40, 120, -112, -67}, {108, -61, 125, 173, -203, -50, -199, 170, 23, 18}, {55, 40, -97, 26, 165, 151, -21, 32, -62, 106}, {185, -11, 21, 46, 97, -241, 24, -200, 110, -152}, {131, 10, 122, 230, 231, -85, -255, -33, -171, -158}, {0, -141, -95, -44, 14, 115, -206, -228, -3, -33}, {88, -39, -70, -132, -240, 170, -221, 8, 211, -77}, {119, 30, -206, 132, 4, -103, 189, 185, 131, -52}};
    IntMatrix secondOp5{{-235, 108, 177, 211, 166, 169, -46, 92, -128, -181}, {-113, 38, 53, -148, -121, -68, 218, -46, -208, -116}, {-48, 191, -54, 206, -77, -234, -13, 96, -255, 183}, {189, 46, -86, 176, 247, 55, 213, -76, 47, -222}, {71, -221, -22, 253, -28, 37, -130, -218, -164, -46}, {203, -101, -71, 21, -38, 107, -211, 85, 101, -195}, {-94, -186, -136, 96, -161, -254, 205, -83, 226, 112}, {-116, -214, -110, -179, -163, 213, 202, -126, -117, 197}, {-175, 54, 102, 68, -98, 247, -226, -139, 149, -105}, {22, -83, 250, -206, 138, 78, -27, -247, -190, -79}};
    IntMatrix result5{{559, -103720, -57107, -16037, -89770, -137355, 5404, -49042, 66413, 180476}, {-128332, 26749, 57590, 6994, 6654, 42260, 3867, -23419, 84733, 9904}, {-45813, -32363, -9734, -95364, -61889, 13065, 38926, 57251, 5021, 12649}, {-20996, 91474, 17481, -16073, 70558, 83645, 41759, 39052, -61495, -1550}, {45937, -76675, 20018, 1399, 26692, 58069, -27013, -51056, -39080, -73065}, {-78232, 85485, 34005, 149461, 45208, -25951, -19378, 19877, 9260, -32299}, {59092, 64316, -20330, 150778, 106102, 8193, 15434, 36359, -134845, -52280}, {82127, 49449, 37508, 27141, 74816, 42666, -151677, 61827, 46747, -79396}, {-39164, 81629, 53299, -62900, -4654, 139903, -133722, 86997, 60211, -56268}, {-80439, -73117, -16042, 4963, -12206, 82362, 100986, -74229, 76671, -24154}};
    EXPECT_EQ(firstOp5 * secondOp5, result5);
    // Generation done by ./generateTestcases.py
}

TEST(TEST11, StressMultiplication8_4) {
    // Generated test 1
    IntMatrix firstOp1{{-188, -131, 213, -98}, {-202, 236, 114, -222}, {180, -139, -161, 135}, {-116, -163, -77, 21}, {-52, 109, 65, -50}, {20, -107, 169, 10}, {102, 48, -50, 238}, {61, -175, 79, -113}};
    IntMatrix secondOp1{{57, -88, 228, 134, -106, -250, -132, -30}, {59, -49, 133, 163, 82, 198, 140, 16}, {-221, -51, 121, 102, -41, -184, 41, -194}, {-118, 249, -25, 249, -68, -139, -110, -189}};
    IntMatrix result1{{-53954, -12302, -32064, -49221, 7117, -4508, 25989, -19256}, {3412, -54880, 4676, -32250, 51186, 107110, 88798, 29678}, {21710, 32797, -303, 18656, -33057, -61663, -64671, -1905}, {-1690, 27351, -57969, -44738, 659, 7975, -12975, 11841}, {-4998, -16530, 11756, 4979, 15185, 29572, 30289, 144}, {-43702, -2646, 10528, 4967, -18503, -58672, -11791, -36988}, {-8388, 50484, 17640, 75654, -21010, -39878, -34974, -37574}, {-10973, -28959, 3017, -40430, -16371, -48729, -16883, 1401}};
    EXPECT_EQ(firstOp1 * secondOp1, result1);
    // Generated test 2
    IntMatrix firstOp2{{-182, 36, -217, -135}, {181, -51, -119, 23}, {147, 157, 246, 131}, {11, 253, -48, -131}, {-158, -103, 110, 207}, {30, -186, -75, 44}, {28, -222, -132, -208}, {-1, 214, 138, 190}};
    IntMatrix secondOp2{{-149, 242, 185, -130, 161, 202, 237, -129}, {22, -204, -143, -215, -123, 169, -162, 66}, {112, -65, 101, 74, -186, 138, -20, 33}, {246, 6, 192, 196, -226, 174, -209, 248}};
    IntMatrix result2{{-29604, -38093, -86655, -26598, 37142, -84116, -16411, -14787}, {-35761, 62079, 33175, -16863, 52350, 15523, 48732, -24938}, {41329, -11658, 54742, -8985, -71006, 112969, -22894, 32005}, {-33675, -46616, -64144, -85053, 9186, 15561, -10040, -18793}, {84518, -23132, 36353, 91397, -80011, 1875, -66223, 68550}, {-6138, 50343, 33021, 39164, 31714, -28068, 29546, -7709}, {-75008, 59396, -16342, -6446, 103374, -86270, 88712, -74204}, {67053, -51728, 19631, 1572, -95091, 88068, -77375, 65927}};
    EXPECT_EQ(firstOp2 * secondOp2, result2);
    // Generated test 3
    IntMatrix firstOp3{{234, 144, -152, 233}, {49, -47, 95, -138}, {86, -107, 220, -99}, {113, 225, -110, -139}, {-158, 63, -240, 157}, {-188, 209, -142, -200}, {-9, 194, 209, -64}, {39, 182, -190, -92}};
    IntMatrix secondOp3{{12, 159, 15, 182, -53, 136, 39, -242}, {248, 192, 157, 23, 252, 101, -166, -105}, {46, 158, 185, 44, 204, -66, -180, -169}, {216, 217, -224, 68, 73, 82, -195, -251}};
    IntMatrix result3{{81856, 91399, -54194, 55056, 9887, 75506, -32853, -104543}, {-36506, -16169, 41843, 2633, -5135, -15669, 19523, 11660}, {-36768, 6407, 47367, 16139, 6131, -21749, 821, -21908}, {22072, 13624, 47806, 11449, 18124, 33955, 13962, 2508}, {36600, -16877, -72047, -27191, -13249, 13589, -4035, 32774}, {-156, -55600, 48523, -49257, 19064, -11487, 22534, 97749}, {43794, 54951, 83324, 7668, 87329, -672, -57695, -37449}, {16992, -8839, 14617, -3332, -1679, 28682, 23449, 26654}};
    EXPECT_EQ(firstOp3 * secondOp3, result3);
    // Generated test 4
    IntMatrix firstOp4{{62, -18, -2, -92}, {68, 155, -240, -119}, {189, 55, 5, -59}, {90, 174, -198, 247}, {-234, -9, 83, 155}, {-62, -172, -145, -235}, {-146, -123, -88, 59}, {-36, -138, 162, 196}};
    IntMatrix secondOp4{{160, 195, -132, -105, -34, 44, -63, -53}, {-24, 76, 62, 138, 186, -45, -120, 200}, {3, 249, -190, -139, -60, 134, -186, 107}, {62, 82, -155, -42, -24, 54, -64, 142}};
    IntMatrix result4{{4642, 2680, 5340, -4852, -3128, -1698, 4514, -20164}, {-938, -44478, 64679, 52608, 43774, -42569, 29372, -15182}, {25277, 37442, -13343, -10472, 4920, 3325, -15661, -6860}, {24944, 1726, -1757, 31710, 35256, -17064, -5530, 43918}, {-27365, -12937, -9465, 5281, -2418, 9601, -9536, 41493}, {-20797, -80537, 61495, 12799, -15544, -27108, 66556, -79999}, {-17014, -54892, 19221, 8110, -14050, -9495, 36550, -17900}, {10190, 38902, -64964, -46014, -38868, 36918, -23848, 19474}};
    EXPECT_EQ(firstOp4 * secondOp4, result4);
    // Generated test 5
    IntMatrix firstOp5{{-131, 143, -73, 85}, {77, 185, 21, -143}, {107, 52, -7, 73}, {111, -230, 247, 172}, {218, 82, -228, -207}, {-150, 247, -44, 129}, {55, -224, -63, 150}, {121, 246, -54, -128}};
    IntMatrix secondOp5{{-69, 137, -1, -146, -28, -175, 7, 37}, {22, -211, 150, 201, 142, 176, 192, -143}, {-172, -82, 130, -113, -53, -74, 27, 157}, {-232, -23, 217, 83, -206, 238, 119, 202}};
    IntMatrix result5{{5021, -44089, 30536, 63173, 10333, 73725, 34683, -19587}, {28321, -26919, -628, 11701, 52459, -16503, 19609, -49195}, {-21971, 2582, 22624, 1680, -10279, 8319, 19231, 10170}, {-95107, 39527, 34823, -76071, -84291, -37247, -16246, 110520}, {74002, 36021, -62477, -6763, 60266, -56112, -13519, -81270}, {-6576, -72026, 59473, 87226, 15032, 103680, 60537, -21721}, {-32687, 56515, -9295, -33485, -60909, -8687, -26474, 54476}, {36047, -27957, 1983, 27258, 60774, -4347, 31389, -65035}};
    EXPECT_EQ(firstOp5 * secondOp5, result5);
    // Generation done by ./generateTestcases.py
}

